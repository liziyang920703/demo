spring.datasource.url=jdbc:mysql://49.235.93.20:3306/demo?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true


# 指定全局配置文件位置
#mybatis.config-location=classpath:mybatis-config.xml
# 指定sql映射文件位置
#扫描xml包下的xml
#mybatis.mapper-locations=com/example/mapper/*.xml
#@MapperScan(basePackages="com.ostrich.*.repository")这个注解是用户扫描mapper接口的也就是dao类，
#mybatis.mapper-locations，而这个是用于扫描mapper.xml的，二者缺少一个都会报错
#mybatis.mapper-locations=classpath:com.example.mapper/xml/*.xml
mybatis-plus.global-config.db-config.db-type=mysql

#如果不出意外的话，使用下面的地址就可以进行查看：#http://localhost:8080/actuator/beans
management.endpoints.web.exposure.include=*

#控制台打印sql语句
logging.level.com.example.mapper = debug
